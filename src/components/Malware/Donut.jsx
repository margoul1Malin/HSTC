import React, { useState, useEffect } from 'react';
import { FiFileText, FiUpload, FiSettings, FiCpu, FiPlay, FiCheck, FiX, FiTerminal, FiDownload, FiInfo, FiAlertTriangle } from 'react-icons/fi';

const Donut = () => {
  // État pour détecter Windows
  const [isWindows, setIsWindows] = useState(false);
  
  // États pour les options
  const [inputFile, setInputFile] = useState('');
  const [architecture, setArchitecture] = useState('x64');
  const [bypass, setBypass] = useState('1');
  const [outputFile, setOutputFile] = useState('');
  const [params, setParams] = useState('');
  const [runtime, setRuntime] = useState('');
  const [method, setMethod] = useState('1');
  const [entrypoint, setEntrypoint] = useState('');
  const [exitOpt, setExitOpt] = useState('1');
  const [class_name, setClassName] = useState('');
  const [domain, setDomain] = useState('');
  const [apimode, setApimode] = useState('1');
  const [uuidOpt, setUuidOpt] = useState('');

  // État pour le résultat
  const [loading, setLoading] = useState(false);
  const [output, setOutput] = useState(null);
  const [error, setError] = useState(null);
  const [commandLine, setCommandLine] = useState('');

  // Options pour les sélecteurs
  const architectureOptions = [
    { value: 'x86', label: 'x86 (32-bit)' },
    { value: 'x64', label: 'x64 (64-bit)' },
    { value: 'x84', label: 'x84 (32+64-bit)' }
  ];

  const bypassOptions = [
    { value: '1', label: 'AMSI/WLDP' },
    { value: '2', label: 'ETW only' },
    { value: '3', label: 'AMSI/WLDP + ETW' },
    { value: '0', label: 'Aucun' }
  ];

  const methodOptions = [
    { value: '1', label: 'WinMain (EXE)' },
    { value: '2', label: 'DllMain (DLL)' },
    { value: '3', label: 'DllMain (EXE -> DLL)' }
  ];

  const exitOptions = [
    { value: '1', label: 'Thread - Rester dans processus' },
    { value: '2', label: 'Process - Terminer le processus' },
    { value: '0', label: 'Ne rien faire' }
  ];

  const apimodeOptions = [
    { value: '1', label: 'Normal' },
    { value: '2', label: 'Dynamic API' },
    { value: '3', label: 'Halo s API' }
  ];

  // Vérifier la plateforme au chargement
  useEffect(() => {
    const checkPlatform = async () => {
      if (window.electronAPI && window.electronAPI.getPlatform) {
        const platform = await window.electronAPI.getPlatform();
        setIsWindows(platform === 'win32');
      }
    };
    checkPlatform();
  }, []);

  // Générer la ligne de commande
  useEffect(() => {
    if (!inputFile) {
      setCommandLine('');
      return;
    }

    let cmd = 'python -m donut';

    if (inputFile) cmd += ` "${inputFile}"`;
    if (architecture !== 'x64') cmd += ` -a ${architecture}`;
    if (bypass !== '1') cmd += ` -b ${bypass}`;
    if (outputFile) cmd += ` -o "${outputFile}"`;
    if (params) cmd += ` -p "${params}"`;
    if (runtime) cmd += ` -c "${runtime}"`;
    if (method !== '1') cmd += ` -m ${method}`;
    if (entrypoint) cmd += ` -e ${entrypoint}`;
    if (exitOpt !== '1') cmd += ` -x ${exitOpt}`;
    if (class_name) cmd += ` -n "${class_name}"`;
    if (domain) cmd += ` -d "${domain}"`;
    if (apimode !== '1') cmd += ` -w ${apimode}`;
    if (uuidOpt) cmd += ` -u "${uuidOpt}"`;

    setCommandLine(cmd);
  }, [inputFile, architecture, bypass, outputFile, params, runtime, method, entrypoint, exitOpt, class_name, domain, apimode, uuidOpt]);

  // Fonction pour exécuter la commande via Electron
  const executeDonut = async () => {
    if (!inputFile) {
      setError('Veuillez spécifier un fichier d\'entrée');
      return;
    }

    setLoading(true);
    setOutput(null);
    setError(null);

    try {
      // Vérifier si l'API Electron est disponible
      if (!window.electronAPI) {
        throw new Error('Cette fonction n\'est disponible que dans l\'application Electron');
      }

      // Exécuter la commande via Electron
      const result = await window.electronAPI.executeCommand(commandLine);
      
      if (result.error) {
        throw new Error(result.error);
      }

      setOutput({
        stdout: result.stdout,
        stderr: result.stderr,
        exitCode: result.exitCode
      });

    } catch (err) {
      console.error('Erreur lors de l\'exécution de Donut:', err);
      setError(err.message || 'Une erreur s\'est produite');
    } finally {
      setLoading(false);
    }
  };

  // Gérer le changement de fichier
  const handleFileChange = async (e) => {
    if (!e.target.files || e.target.files.length === 0) return;
    
    const file = e.target.files[0];
    
    try {
      // Si nous sommes dans l'app Electron, utiliser le chemin du fichier
      if (window.electronAPI) {
        const filePath = await window.electronAPI.getFilePath(file.path || file.name);
        setInputFile(filePath);
        
        // Générer automatiquement un nom de fichier de sortie si vide
        if (!outputFile) {
          const baseName = filePath.split(/[\\/]/).pop();
          const nameWithoutExt = baseName.substring(0, baseName.lastIndexOf('.'));
          setOutputFile(`${nameWithoutExt}.bin`);
        }
      } else {
        // En mode web, juste stocker le nom du fichier
        setInputFile(file.name);
      }
    } catch (err) {
      console.error('Erreur lors de la sélection du fichier:', err);
      setError('Impossible de sélectionner le fichier');
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-8 text-center text-indigo-600 dark:text-indigo-400">
        Donut - Générateur de Shellcode
      </h1>

      {isWindows ? (
        <div className="bg-red-50 dark:bg-red-900/20 border-l-4 border-red-500 p-4 rounded-md mb-6">
          <div className="flex items-center">
            <FiAlertTriangle className="text-red-500 mr-2" size={24} />
            <div>
              <p className="font-bold text-red-700 dark:text-red-300">Fonctionnalité non disponible sur Windows</p>
              <p className="text-red-700 dark:text-red-300">Donut n'est pas compatible avec Windows dans cette interface. Veuillez utiliser un système Linux pour accéder à cette fonctionnalité.</p>
            </div>
          </div>
        </div>
      ) : (
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 mb-8">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Section de configuration principale */}
            <div>
              <h2 className="text-xl font-semibold mb-4 flex items-center">
                <FiSettings className="mr-2" /> Configuration principale
              </h2>

              {/* Fichier d'entrée */}
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Fichier d'entrée
                </label>
                <div className="flex items-center">
                  <input
                    type="text"
                    value={inputFile}
                    onChange={(e) => setInputFile(e.target.value)}
                    placeholder=".NET assembly, EXE, DLL, VBS, JS"
                    className="flex-1 p-2 border rounded-l-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                  />
                  <label className="cursor-pointer bg-indigo-600 hover:bg-indigo-700 text-white px-3 py-2 rounded-r-md inline-flex items-center">
                    <FiUpload />
                    <input
                      type="file"
                      onChange={handleFileChange}
                      className="hidden"
                    />
                  </label>
                </div>
              </div>

              {/* Architecture */}
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Architecture
                </label>
                <select
                  value={architecture}
                  onChange={(e) => setArchitecture(e.target.value)}
                  className="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                >
                  {architectureOptions.map(option => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>
              </div>

              {/* Mode de contournement (Bypass) */}
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Mode de contournement
                </label>
                <select
                  value={bypass}
                  onChange={(e) => setBypass(e.target.value)}
                  className="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                >
                  {bypassOptions.map(option => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>
              </div>

              {/* Fichier de sortie */}
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Fichier de sortie (facultatif)
                </label>
                <input
                  type="text"
                  value={outputFile}
                  onChange={(e) => setOutputFile(e.target.value)}
                  placeholder="Nom du fichier de sortie (.bin)"
                  className="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                />
              </div>

              {/* Paramètres */}
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Paramètres (facultatif)
                </label>
                <input
                  type="text"
                  value={params}
                  onChange={(e) => setParams(e.target.value)}
                  placeholder="Paramètres à passer au programme"
                  className="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                />
              </div>
            </div>

            {/* Options avancées */}
            <div>
              <h2 className="text-xl font-semibold mb-4 flex items-center">
                <FiCpu className="mr-2" /> Options avancées
              </h2>

              {/* Runtime / Framework */}
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Runtime / Framework (facultatif)
                </label>
                <input
                  type="text"
                  value={runtime}
                  onChange={(e) => setRuntime(e.target.value)}
                  placeholder="Ex: v4.0.30319"
                  className="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                />
              </div>

              {/* Méthode d'injection */}
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Méthode d'injection
                </label>
                <select
                  value={method}
                  onChange={(e) => setMethod(e.target.value)}
                  className="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                >
                  {methodOptions.map(option => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>
              </div>

              {/* Point d'entrée */}
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Point d'entrée (facultatif)
                </label>
                <input
                  type="text"
                  value={entrypoint}
                  onChange={(e) => setEntrypoint(e.target.value)}
                  placeholder="Ex: Main, Run, etc."
                  className="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                />
              </div>

              {/* Option de sortie */}
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Option de sortie
                </label>
                <select
                  value={exitOpt}
                  onChange={(e) => setExitOpt(e.target.value)}
                  className="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                >
                  {exitOptions.map(option => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>
              </div>

              {/* Nom de classe & Domaine (pour .NET) */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    Nom de classe
                  </label>
                  <input
                    type="text"
                    value={class_name}
                    onChange={(e) => setClassName(e.target.value)}
                    placeholder="Pour .NET"
                    className="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    Domaine d'application
                  </label>
                  <input
                    type="text"
                    value={domain}
                    onChange={(e) => setDomain(e.target.value)}
                    placeholder="Pour .NET"
                    className="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                  />
                </div>
              </div>

              {/* Mode API & UUID */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    Mode API
                  </label>
                  <select
                    value={apimode}
                    onChange={(e) => setApimode(e.target.value)}
                    className="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                  >
                    {apimodeOptions.map(option => (
                      <option key={option.value} value={option.value}>
                        {option.label}
                      </option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    UUID (facultatif)
                  </label>
                  <input
                    type="text"
                    value={uuidOpt}
                    onChange={(e) => setUuidOpt(e.target.value)}
                    placeholder="Format UUID"
                    className="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                  />
                </div>
              </div>
            </div>
          </div>

          {/* Ligne de commande */}
          <div className="mt-6">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Ligne de commande
            </label>
            <div className="bg-gray-100 dark:bg-gray-700 rounded-md p-3 font-mono text-sm overflow-x-auto">
              {commandLine || 'La commande apparaîtra ici...'}
            </div>
          </div>

          {/* Bouton d'exécution */}
          <div className="mt-6 flex justify-center">
            <button
              onClick={executeDonut}
              disabled={loading || !inputFile}
              className="bg-indigo-600 hover:bg-indigo-700 text-white py-2 px-6 rounded-lg flex items-center disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? (
                <>
                  <div className="animate-spin mr-2 h-4 w-4 border-2 border-white border-t-transparent rounded-full"></div>
                  Génération en cours...
                </>
              ) : (
                <>
                  <FiPlay className="mr-2" /> Générer le Shellcode
                </>
              )}
            </button>
          </div>
        </div>
      )}

      {/* Message d'erreur */}
      {error && (
        <div className="mb-6 bg-red-100 dark:bg-red-900/30 border-l-4 border-red-500 text-red-700 dark:text-red-400 p-4 rounded-md">
          <div className="flex items-center">
            <FiX className="flex-shrink-0 mr-2" />
            <span>{error}</span>
          </div>
        </div>
      )}

      {/* Résultat */}
      {output && (
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
          <h2 className="text-xl font-semibold mb-4 flex items-center">
            <FiTerminal className="mr-2" /> Résultat
            {output.exitCode === 0 ? (
              <span className="ml-auto bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400 text-xs px-2 py-1 rounded-full flex items-center">
                <FiCheck className="mr-1" /> Succès
              </span>
            ) : (
              <span className="ml-auto bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400 text-xs px-2 py-1 rounded-full flex items-center">
                <FiX className="mr-1" /> Erreur (code {output.exitCode})
              </span>
            )}
          </h2>

          {/* Sortie standard */}
          {output.stdout && (
            <div className="mb-4">
              <div className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Sortie standard</div>
              <pre className="bg-gray-100 dark:bg-gray-700 p-3 rounded-md text-sm font-mono overflow-x-auto whitespace-pre-wrap">
                {output.stdout}
              </pre>
            </div>
          )}

          {/* Sortie d'erreur */}
          {output.stderr && (
            <div className="mb-4">
              <div className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Erreurs</div>
              <pre className="bg-gray-100 dark:bg-gray-700 p-3 rounded-md text-sm font-mono overflow-x-auto whitespace-pre-wrap text-red-600 dark:text-red-400">
                {output.stderr}
              </pre>
            </div>
          )}

          {/* Bouton de téléchargement si succès */}
          {output.exitCode === 0 && outputFile && (
            <div className="mt-4 flex justify-end">
              <button 
                onClick={() => {
                  if (window.electronAPI) {
                    window.electronAPI.openFile(outputFile);
                  }
                }}
                className="bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-lg flex items-center"
              >
                <FiDownload className="mr-2" /> Ouvrir le shellcode généré
              </button>
            </div>
          )}
        </div>
      )}

      {/* Documentation */}
      <div className="mt-8 bg-blue-50 dark:bg-blue-900/20 border-l-4 border-blue-500 text-blue-700 dark:text-blue-300 p-4 rounded-md">
        <h3 className="font-bold mb-2 flex items-center">
          <FiInfo className="mr-2" /> À propos de Donut
        </h3>
        <p className="mb-2">
          Donut est un générateur de shellcode en mémoire qui permet de transformer pratiquement n'importe quel programme Windows en position-independent shellcode.
        </p>
        <p>
          Compatible avec: fichiers .NET (Assembly), EXE non managés, DLL, VBS, JS, et plus encore. Pour plus d'informations, consultez la <a href="https://github.com/TheWover/donut" target="_blank" rel="noopener noreferrer" className="text-indigo-600 dark:text-indigo-400 underline">documentation officielle</a>.
        </p>
      </div>
    </div>
  );
};

export default Donut; 