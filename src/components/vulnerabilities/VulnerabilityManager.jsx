import React, { useState, useEffect } from 'react';
// Utiliser les importations par défaut avec la syntaxe correcte
const VulnerabilityList = require('./VulnerabilityList').default;
const VulnerabilityForm = require('./VulnerabilityForm').default;
const VulnerabilityDetails = require('./VulnerabilityDetails').default;

const VulnerabilityManager = () => {
  console.log('VulnerabilityManager - Rendu');
  
  // État pour la vue active
  const [activeView, setActiveView] = useState('list');
  // État pour l'ID de la vulnérabilité sélectionnée
  const [selectedVulnerabilityId, setSelectedVulnerabilityId] = useState(null);

  useEffect(() => {
    console.log('VulnerabilityManager - useEffect - Vue active:', activeView);
  }, [activeView]);

  // Gérer l'affichage des détails d'une vulnérabilité
  const handleViewDetails = (id) => {
    console.log('VulnerabilityManager - handleViewDetails - ID:', id);
    setSelectedVulnerabilityId(id);
    setActiveView('details');
  };

  // Gérer l'édition d'une vulnérabilité
  const handleEdit = (id) => {
    console.log('VulnerabilityManager - handleEdit - ID:', id);
    setSelectedVulnerabilityId(id);
    setActiveView('edit');
  };

  // Gérer l'ajout d'une nouvelle vulnérabilité
  const handleAdd = () => {
    console.log('VulnerabilityManager - handleAdd');
    setSelectedVulnerabilityId(null);
    setActiveView('add');
  };

  // Gérer le retour à la liste
  const handleBack = () => {
    console.log('VulnerabilityManager - handleBack');
    setActiveView('list');
  };

  // Gérer la sauvegarde d'une vulnérabilité
  const handleSave = () => {
    console.log('VulnerabilityManager - handleSave');
    setActiveView('list');
  };

  // Rendu conditionnel en fonction de la vue active
  const renderActiveView = () => {
    console.log('VulnerabilityManager - renderActiveView - Vue active:', activeView);
    
    switch (activeView) {
      case 'details':
        return React.createElement(VulnerabilityDetails, {
          vulnerabilityId: selectedVulnerabilityId,
          onBack: handleBack,
          onEdit: handleEdit
        });
      case 'add':
        return React.createElement(VulnerabilityForm, {
          onSave: handleSave,
          onCancel: handleBack
        });
      case 'edit':
        return React.createElement(VulnerabilityForm, {
          vulnerabilityId: selectedVulnerabilityId,
          onSave: handleSave,
          onCancel: handleBack
        });
      case 'list':
      default:
        console.log('VulnerabilityManager - Rendu de la liste');
        return React.createElement(VulnerabilityList, {
          onViewDetails: handleViewDetails,
          onEdit: handleEdit,
          onAdd: handleAdd
        });
    }
  };

  return (
    <div className="vulnerability-manager">
      <h1 className="text-3xl font-bold mb-6">Gestionnaire de Vulnérabilités</h1>
      {renderActiveView()}
    </div>
  );
};

export default VulnerabilityManager; 